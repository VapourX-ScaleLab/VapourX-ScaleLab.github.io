---
import { Image } from 'astro:assets'
import { cn } from 'astro-pure/utils'
import { getAllMembers } from '@/utils/members'

interface Props {
  class?: string
  title: string
  members?: {
    name: string
    avatar: string | ImageMetadata
    organization: string
    role: string | string[]
    slogan: string
    href?: string
  }[]
  // 新增：是否显示所有成员
  showAll?: boolean
  // 新增：按角色过滤
  filterByRole?: string[]
  // 新增：按标签过滤
  filterByTags?: string[]
}

const { class: className, title, members: customMembers, showAll = false, filterByRole, filterByTags, ...props } = Astro.props

// 获取所有成员数据
const allMembers = getAllMembers()

// 处理成员数据
let displayMembers = customMembers || []

if (!customMembers) {
  // 如果没有提供自定义成员数据，则从 members.json 中获取
  displayMembers = allMembers
    .filter(member => {
      // 如果指定了角色过滤
      if (filterByRole && filterByRole.length > 0) {
        // member.role 现在是一个数组，直接检查是否有匹配的角色
        const hasMatchingRole = filterByRole.some(filterRole => 
          member.role.includes(filterRole)
        );
        if (!hasMatchingRole) {
          return false;
        }
      }
      
      // 如果指定了标签过滤
      if (filterByTags && filterByTags.length > 0) {
        const hasMatchingTag = filterByTags.some(tag => member.tags.includes(tag))
        if (!hasMatchingTag) {
          return false
        }
      }
      
      return true
    })
    .map(member => ({
      name: member.name,
      avatar: member.avatar,
      organization: member.organization,
      role: member.role,
      slogan: member.slogan,
      href: `/peoples/${member.id}`
    }))
}

// 如果 showAll 为 false，只显示前4个成员
if (!showAll && !customMembers) {
  displayMembers = displayMembers.slice(0, 4)
}
---

<div
  class={cn('not-prose flex flex-col rounded-xl border py-3 px-3 gap-y-3 sm:gap-y-4', className)}
  {...props}
>
  <div class='m-0 px-2 text-lg font-medium'>{title}</div>
  <div class='grid grid-cols-1 gap-x-3 gap-y-3 sm:grid-cols-2 lg:grid-cols-3'>
    {
      displayMembers.map((member) => {
        const content = (
          <div class='group relative text-sm leading-normal no-underline'>
            <div class='flex flex-col items-center gap-y-3 rounded-lg border border-transparent px-4 py-4 transition-colors hover:border-border hover:bg-muted'>
              {/* 椭圆头像 */}
              <div class='relative'>
                <div class='size-16 overflow-hidden rounded-full border-2 border-border bg-muted'>
                  {typeof member.avatar === 'string' ? (
                    <img 
                      src={member.avatar} 
                      alt={member.name} 
                      class='h-full w-full object-cover'
                      width={64}
                      height={64}
                      onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
                    />
                  ) : (
                    <Image 
                      src={member.avatar} 
                      alt={member.name} 
                      class='h-full w-full object-cover'
                      width={64}
                      height={64}
                    />
                  )}
                  <div 
                    class="size-16 flex items-center justify-center text-white text-lg font-bold"
                    style={`display: none; background: ${
                      member.name.length % 4 === 0 ? 'linear-gradient(135deg, #3b82f6, #8b5cf6)' :
                      member.name.length % 4 === 1 ? 'linear-gradient(135deg, #10b981, #14b8a6)' :
                      member.name.length % 4 === 2 ? 'linear-gradient(135deg, #f97316, #ef4444)' :
                      'linear-gradient(135deg, #ec4899, #f43f5e)'
                    }`}
                  >
                    {member.name.charAt(0).toUpperCase()}
                  </div>
                </div>
                {/* 可选的在线状态指示器 */}
                <div class='absolute -bottom-1 -right-1 size-4 rounded-full border-2 border-background bg-green-500'></div>
              </div>
              
              {/* 成员信息 */}
              <div class='z-20 flex flex-col items-center text-center'>
                <div class='font-semibold text-foreground'>{member.name}</div>
                <div class='text-xs text-muted-foreground'>{member.organization}</div>
                <div class='text-xs text-primary font-medium'>{Array.isArray(member.role) ? member.role.join('/') : member.role}</div>
                <div class='mt-2 text-xs italic text-muted-foreground leading-relaxed'>
                  "{member.slogan}"
                </div>
              </div>
            </div>
          </div>
        )

        return member.href ? (
          <a href={member.href} target={member.href.startsWith('http') ? '_blank' : '_self'} rel={member.href.startsWith('http') ? 'noopener noreferrer' : undefined}>
            {content}
          </a>
        ) : (
          content
        )
      })
    }
  </div>
</div>
