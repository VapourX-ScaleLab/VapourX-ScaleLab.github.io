---
import PageLayout from '@/layouts/BaseLayout.astro'
import { Button, Card, Label } from 'astro-pure/user'
---

<PageLayout meta={{ title: 'Upload New Blog' }}>
  <main class='flex w-full flex-col items-center'>
    <section class='animate mb-10 flex flex-col items-center gap-y-7'>
      <h1 class='animated-gradient-title text-3xl'>上传新文章</h1>
      <p class='text-muted-foreground text-center max-w-2xl'>
        在这里创建新的博客文章。填写表单后，系统将自动创建一个Pull Request到GitHub仓库。
      </p>
    </section>

    <div class='w-full max-w-4xl mx-auto px-4'>
      <Card class='p-6'>
        <form id='blogForm' class='space-y-6'>
          <!-- 基本信息 -->
          <div class='grid grid-cols-1 md:grid-cols-2 gap-4'>
            <div>
              <Label for='title'>文章标题 *</Label>
              <input id='title' name='title' required placeholder='输入文章标题' class='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary' />
            </div>
            <div>
              <Label for='folderName'>文件夹名称 *</Label>
              <input id='folderName' name='folderName' required placeholder='英文，如：my-new-post' class='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary' />
            </div>
          </div>

          <div class='grid grid-cols-1 md:grid-cols-2 gap-4'>
            <div>
              <Label for='publishDate'>发布日期</Label>
              <input id='publishDate' name='publishDate' type='date' class='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary' />
            </div>
            <div>
              <Label for='tags'>标签</Label>
              <input id='tags' name='tags' placeholder='用逗号分隔，如：AI, 技术, 思考' class='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary' />
            </div>
          </div>

          <div>
            <Label for='description'>文章描述</Label>
            <textarea id='description' name='description' rows='3' placeholder='简短描述文章内容' class='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary'></textarea>
          </div>

          <div class='grid grid-cols-1 md:grid-cols-2 gap-4'>
            <div>
              <Label for='author'>作者</Label>
              <input id='author' name='author' placeholder='作者姓名' class='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary' />
            </div>
            <div>
              <Label for='language'>语言</Label>
              <select id='language' name='language' class='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary'>
                <option value='English'>English</option>
                <option value='Chinese'>中文</option>
              </select>
            </div>
          </div>

          <!-- Markdown编辑器 -->
          <div>
            <Label for='content'>文章内容 (Markdown) *</Label>
            <div class='border border-gray-300 rounded-md'>
              <div class='bg-gray-50 px-3 py-2 border-b border-gray-300 text-sm text-gray-600'>
                Markdown编辑器
                <button type='button' id='previewBtn' class='ml-4 text-primary hover:text-primary/80'>
                  预览
                </button>
              </div>
              <textarea 
                id='content' 
                name='content' 
                rows='20' 
                required 
                placeholder='在这里用Markdown格式编写文章内容...'
                class='border-0 focus:ring-0 w-full px-3 py-2'
              ></textarea>
            </div>
          </div>

          <!-- 预览区域 -->
          <div id='previewArea' class='hidden'>
            <Label>预览</Label>
            <div id='previewContent' class='border border-gray-300 rounded-md p-4 bg-white min-h-[200px] prose max-w-none'>
              <!-- 预览内容将在这里显示 -->
            </div>
          </div>

          <!-- 提交按钮 -->
          <div class='flex justify-end gap-4'>
            <Button type='button' id='previewToggleBtn' style='outline'>
              切换预览
            </Button>
            <Button type='submit' id='submitBtn'>
              提交文章
            </Button>
          </div>
        </form>
      </Card>
    </div>
  </main>

  <!-- 加载状态 -->
  <div id='loadingOverlay' class='fixed inset-0 bg-black/50 flex items-center justify-center z-50 hidden'>
    <div class='bg-white rounded-lg p-6 text-center'>
      <div class='animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4'></div>
      <p>正在创建Pull Request...</p>
    </div>
  </div>

  <!-- 成功提示 -->
  <div id='successModal' class='fixed inset-0 bg-black/50 flex items-center justify-center z-50 hidden'>
    <div class='bg-white rounded-lg p-6 text-center max-w-md'>
      <div class='text-green-500 text-4xl mb-4'>✓</div>
      <h3 class='text-lg font-semibold mb-2'>提交成功！</h3>
      <p class='text-gray-600 mb-4'>您的文章已成功提交，Pull Request已创建。</p>
      <div id='prLink' class='mb-4'></div>
      <button type='button' onclick='closeSuccessModal()' class='px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 transition-colors'>关闭</button>
    </div>
  </div>

  <!-- 错误提示 -->
  <div id='errorModal' class='fixed inset-0 bg-black/50 flex items-center justify-center z-50 hidden'>
    <div class='bg-white rounded-lg p-6 text-center max-w-md'>
      <div class='text-yellow-500 text-4xl mb-4'>⚠️</div>
      <h3 class='text-lg font-semibold mb-2'>GitHub配置提醒</h3>
      <p id='errorMessage' class='text-gray-600 mb-4'></p>
      <div id='errorPrLink' class='mb-4'></div>
      <div class='flex gap-2 justify-center'>
        <button type='button' onclick='closeErrorModal()' class='px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 transition-colors'>关闭</button>
        <button type='button' onclick='closeErrorModalAndReset()' class='px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 transition-colors'>重置表单</button>
      </div>
    </div>
  </div>
</PageLayout>

<script>
  import { marked } from 'marked';

  // 表单处理
  const form = document.getElementById('blogForm') as HTMLFormElement;
  const previewBtn = document.getElementById('previewBtn');
  const previewToggleBtn = document.getElementById('previewToggleBtn');
  const previewArea = document.getElementById('previewArea');
  const previewContent = document.getElementById('previewContent');
  const contentTextarea = document.getElementById('content') as HTMLTextAreaElement;
  const loadingOverlay = document.getElementById('loadingOverlay');
  const successModal = document.getElementById('successModal');
  const errorModal = document.getElementById('errorModal');
  const prLink = document.getElementById('prLink');
  const errorMessage = document.getElementById('errorMessage');
  const errorPrLink = document.getElementById('errorPrLink');

  let isPreviewVisible = false;

  // 预览功能
  async function togglePreview() {
    if (isPreviewVisible) {
      previewArea?.classList.add('hidden');
      isPreviewVisible = false;
    } else {
      const content = contentTextarea?.value || '';
      if (previewContent) {
        const htmlContent = await marked.parse(content);
        previewContent.innerHTML = htmlContent;
      }
      previewArea?.classList.remove('hidden');
      isPreviewVisible = true;
    }
  }

  previewBtn?.addEventListener('click', togglePreview);
  previewToggleBtn?.addEventListener('click', togglePreview);

  // 表单提交
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(form);
    const data = {
      title: formData.get('title'),
      folderName: formData.get('folderName'),
      publishDate: formData.get('publishDate'),
      tags: formData.get('tags'),
      description: formData.get('description'),
      author: formData.get('author'),
      language: formData.get('language'),
      content: formData.get('content')
    };

    // 显示加载状态
    loadingOverlay?.classList.remove('hidden');

    try {
      const response = await fetch('/api/create-blog', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data)
      });

      const result = await response.json();

      if (response.ok) {
        if (result.success) {
          // 完全成功
          if (prLink && result.prUrl) {
            prLink.innerHTML = `<a href="${result.prUrl}" target="_blank" class="text-primary hover:underline">查看Pull Request</a>`;
          }
          successModal?.classList.remove('hidden');
          form.reset();
                 } else {
           // 部分成功（GitHub Token问题）
           if (errorPrLink && result.prUrl) {
             errorPrLink.innerHTML = `<a href="${result.prUrl}" target="_blank" class="text-primary hover:underline">查看Pull Request</a>`;
           }
           if (errorMessage) {
             errorMessage.textContent = result.error || 'GitHub配置问题';
           }
           errorModal?.classList.remove('hidden');
         }
      } else {
        // 显示错误信息
        if (errorMessage) {
          errorMessage.textContent = result.error || '提交失败，请重试';
        }
        errorModal?.classList.remove('hidden');
      }
    } catch (error) {
      if (errorMessage) {
        errorMessage.textContent = '网络错误，请检查连接后重试';
      }
      errorModal?.classList.remove('hidden');
    } finally {
      loadingOverlay?.classList.add('hidden');
    }
  });



  // 关闭模态框函数
  function closeSuccessModal() {
    successModal?.classList.add('hidden');
  }

  function closeErrorModal() {
    errorModal?.classList.add('hidden');
  }

  function closeErrorModalAndReset() {
    errorModal?.classList.add('hidden');
    form?.reset();
  }

  // 全局函数，供HTML调用
  (window as any).closeSuccessModal = closeSuccessModal;
  (window as any).closeErrorModal = closeErrorModal;
  (window as any).closeErrorModalAndReset = closeErrorModalAndReset;

  // ESC键关闭模态框
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      successModal?.classList.add('hidden');
      errorModal?.classList.add('hidden');
      loadingOverlay?.classList.add('hidden');
    }
  });

  // 点击背景关闭模态框
  successModal?.addEventListener('click', (e) => {
    if (e.target === successModal) {
      successModal.classList.add('hidden');
    }
  });

  errorModal?.addEventListener('click', (e) => {
    if (e.target === errorModal) {
      errorModal.classList.add('hidden');
    }
  });

  // 自动填充发布日期
  const publishDateInput = document.getElementById('publishDate') as HTMLInputElement;
  if (publishDateInput) {
    const today = new Date().toISOString().split('T')[0];
    publishDateInput.value = today;
  }

  // 文件夹名称自动生成
  const titleInput = document.getElementById('title') as HTMLInputElement;
  const folderNameInput = document.getElementById('folderName') as HTMLInputElement;
  
  titleInput?.addEventListener('input', () => {
    const title = titleInput.value;
    const folderName = title
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .trim();
    
    if (folderNameInput && !folderNameInput.value) {
      folderNameInput.value = folderName;
    }
  });
</script>

<style>
  .prose {
    @apply text-gray-900;
  }
  .prose h1, .prose h2, .prose h3, .prose h4, .prose h5, .prose h6 {
    @apply font-bold text-gray-900;
  }
  .prose h1 { @apply text-2xl; }
  .prose h2 { @apply text-xl; }
  .prose h3 { @apply text-lg; }
  .prose p { @apply mb-4; }
  .prose ul, .prose ol { @apply mb-4 pl-6; }
  .prose li { @apply mb-1; }
  .prose code { @apply bg-gray-100 px-1 py-0.5 rounded text-sm; }
  .prose pre { @apply bg-gray-100 p-4 rounded mb-4 overflow-x-auto; }
  .prose blockquote { @apply border-l-4 border-gray-300 pl-4 italic; }
</style> 