---
import PageLayout from '@/layouts/BaseLayout.astro'
import { Button, Card, Label } from 'astro-pure/user'
---

<PageLayout meta={{ title: '功能测试' }}>
  <main class='flex w-full flex-col items-center'>
    <section class='animate mb-10 flex flex-col items-center gap-y-7'>
      <h1 class='animated-gradient-title text-3xl'>功能测试页面</h1>
      <p class='text-muted-foreground text-center max-w-2xl'>
        这是一个简化的测试页面，用于验证表单和Markdown预览功能。
      </p>
    </section>

    <div class='w-full max-w-4xl mx-auto px-4'>
      <Card class='p-6'>
        <form id='testForm' class='space-y-6'>
          <!-- 基本信息 -->
          <div class='grid grid-cols-1 md:grid-cols-2 gap-4'>
            <div>
              <Label for='title'>文章标题 *</Label>
              <input id='title' name='title' required placeholder='输入文章标题' class='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary' />
            </div>
            <div>
              <Label for='folderName'>文件夹名称 *</Label>
              <input id='folderName' name='folderName' required placeholder='英文，如：my-new-post' class='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary' />
            </div>
          </div>

          <div>
            <Label for='description'>文章描述</Label>
            <textarea id='description' name='description' rows='3' placeholder='简短描述文章内容' class='w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary'></textarea>
          </div>

          <!-- Markdown编辑器 -->
          <div>
            <Label for='content'>文章内容 (Markdown) *</Label>
            <div class='border border-gray-300 rounded-md'>
              <div class='bg-gray-50 px-3 py-2 border-b border-gray-300 text-sm text-gray-600'>
                Markdown编辑器
                <button type='button' id='previewBtn' class='ml-4 text-primary hover:text-primary/80'>
                  预览
                </button>
              </div>
              <textarea 
                id='content' 
                name='content' 
                rows='10' 
                required 
                placeholder='在这里用Markdown格式编写文章内容...'
                class='border-0 focus:ring-0 w-full px-3 py-2'
              ></textarea>
            </div>
          </div>

          <!-- 预览区域 -->
          <div id='previewArea' class='hidden'>
            <Label>预览</Label>
            <div id='previewContent' class='border border-gray-300 rounded-md p-4 bg-white min-h-[200px] prose max-w-none'>
              <!-- 预览内容将在这里显示 -->
            </div>
          </div>

          <!-- 提交按钮 -->
          <div class='flex justify-end gap-4'>
            <Button type='button' id='previewToggleBtn' style='outline'>
              切换预览
            </Button>
            <Button type='submit' id='submitBtn'>
              测试提交
            </Button>
          </div>
        </form>
      </Card>
    </div>

    <!-- 测试结果显示 -->
    <div id='testResult' class='w-full max-w-4xl mx-auto px-4 mt-8 hidden'>
      <Card class='p-6'>
        <h2 class='text-xl font-semibold mb-4'>测试结果</h2>
        <pre id='resultContent' class='bg-gray-100 p-4 rounded-md overflow-x-auto text-sm'></pre>
      </Card>
    </div>
  </main>
</PageLayout>

<script>
  import { marked } from 'marked';

  // 表单处理
  const form = document.getElementById('testForm') as HTMLFormElement;
  const previewBtn = document.getElementById('previewBtn');
  const previewToggleBtn = document.getElementById('previewToggleBtn');
  const previewArea = document.getElementById('previewArea');
  const previewContent = document.getElementById('previewContent');
  const contentTextarea = document.getElementById('content') as HTMLTextAreaElement;
  const testResult = document.getElementById('testResult');
  const resultContent = document.getElementById('resultContent');

  let isPreviewVisible = false;

  // 预览功能
  async function togglePreview() {
    if (isPreviewVisible) {
      previewArea?.classList.add('hidden');
      isPreviewVisible = false;
    } else {
      const content = contentTextarea?.value || '';
      if (previewContent) {
        const htmlContent = await marked.parse(content);
        previewContent.innerHTML = htmlContent;
      }
      previewArea?.classList.remove('hidden');
      isPreviewVisible = true;
    }
  }

  previewBtn?.addEventListener('click', togglePreview);
  previewToggleBtn?.addEventListener('click', togglePreview);

  // 表单提交
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(form);
    const data = {
      title: formData.get('title'),
      folderName: formData.get('folderName'),
      description: formData.get('description'),
      content: formData.get('content')
    };

    // 显示测试结果
    if (testResult && resultContent) {
      resultContent.textContent = JSON.stringify(data, null, 2);
      testResult.classList.remove('hidden');
    }

    // 滚动到结果区域
    testResult?.scrollIntoView({ behavior: 'smooth' });
  });

  // 自动填充发布日期
  const publishDateInput = document.getElementById('publishDate') as HTMLInputElement;
  if (publishDateInput) {
    const today = new Date().toISOString().split('T')[0];
    publishDateInput.value = today;
  }

  // 文件夹名称自动生成
  const titleInput = document.getElementById('title') as HTMLInputElement;
  const folderNameInput = document.getElementById('folderName') as HTMLInputElement;
  
  titleInput?.addEventListener('input', () => {
    const title = titleInput.value;
    const folderName = title
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .trim();
    
    if (folderNameInput && !folderNameInput.value) {
      folderNameInput.value = folderName;
    }
  });
</script>

<style>
  .prose {
    @apply text-gray-900;
  }
  .prose h1, .prose h2, .prose h3, .prose h4, .prose h5, .prose h6 {
    @apply font-bold text-gray-900;
  }
  .prose h1 { @apply text-2xl; }
  .prose h2 { @apply text-xl; }
  .prose h3 { @apply text-lg; }
  .prose p { @apply mb-4; }
  .prose ul, .prose ol { @apply mb-4 pl-6; }
  .prose li { @apply mb-1; }
  .prose code { @apply bg-gray-100 px-1 py-0.5 rounded text-sm; }
  .prose pre { @apply bg-gray-100 p-4 rounded mb-4 overflow-x-auto; }
  .prose blockquote { @apply border-l-4 border-gray-300 pl-4 italic; }
</style> 